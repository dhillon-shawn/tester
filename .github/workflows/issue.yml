name: Create branch and draft pr for issues
on:
  issues:
    types: [opened]

permissions: write-all

jobs:
  assign:
    if: >
      contains(join(github.event.issue.labels.*.name, ','), 'feature') ||
      contains(join(github.event.issue.labels.*.name, ','), 'hotfix')
    runs-on: ubuntu-latest
    steps:
      - name: Check if issue has assignees
        id: check
        run: |
          if [ "${{ toJson(github.event.issue.assignees) }}" = "[]" ]; then
            echo "has_assignees=false" >> $GITHUB_OUTPUT
          else
            echo "has_assignees=true" >> $GITHUB_OUTPUT
          fi

      - name: Auto-assign issue (to creator if none)
        if: steps.check.outputs.has_assignees == 'false'
        uses: pozil/auto-assign-issue@v2
        with:
          assignees: "${{ github.event.issue.user.login }}"
          numOfAssignee: 1

      - name: Refresh issue data
        id: issue
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const num = context.payload.issue.number;
            const { data: issue } = await github.rest.issues.get({ ...repo, issue_number: num });
            core.setOutput('title', issue.title || '');
            core.setOutput('body', issue.body || '');
            core.setOutput('labels', JSON.stringify(issue.labels || []));
            core.setOutput('assignees', JSON.stringify((issue.assignees || []).map(a => a.login)));
            core.setOutput('milestone', issue.milestone ? String(issue.milestone.number) : '');
            const names = (issue.labels || []).map(l => typeof l === 'string' ? l : l.name);
            core.setOutput('mode', names.includes('hotfix') ? 'hotfix' : 'feature');

      - name: Derive metadata
        id: meta
        uses: actions/github-script@v7
        with:
          script: |
            const mode = '${{ steps.issue.outputs.mode }}';
            const defaultBranch = context.payload.repository.default_branch;
            const rawTitle = ${{ toJson(steps.issue.outputs.title) }};
            const title = rawTitle || mode;
            const slug = title.toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/^-+|-+$/g,'').slice(0,50) || mode;
            const tmpBranch = `${mode}/tmp-${context.payload.issue.number}-${slug}`;
            const isDraft = mode === 'feature';
            const ccPrefix = isDraft ? 'feature: ' : 'hotfix: ';
            core.setOutput('default', defaultBranch);
            core.setOutput('tmpBranch', tmpBranch);
            core.setOutput('slug', slug);
            core.setOutput('isDraft', String(isDraft));
            core.setOutput('ccPrefix', ccPrefix);

      - name: Check out default branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.meta.outputs.default }}

      - name: Create temp branch and push empty commit
        env:
          BRANCH: ${{ steps.meta.outputs.tmpBranch }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          MODE: ${{ steps.issue.outputs.mode }}
        run: |
          set -eux
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git switch -c "$BRANCH"
          git commit --allow-empty -m "init ${MODE} branch for #${ISSUE_NUMBER} [skip ci]"
          git push --set-upstream origin "$BRANCH"

      - name: Open PR and copy details
        id: createpr
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const issue_number = context.payload.issue.number;
            const base = '${{ steps.meta.outputs.default }}';
            const head = '${{ steps.meta.outputs.tmpBranch }}';
            const isDraft = '${{ steps.meta.outputs.isDraft }}' === 'true';
            const title = '${{ steps.meta.outputs.ccPrefix }}' + ${{ toJson(steps.issue.outputs.title) }};
            const body = [
              `${isDraft ? 'Draft PR' : 'PR'} for issue #${issue_number}`,
              '',
              `Closes #${issue_number}`,
              '',
              '---',
              ${{ toJson(steps.issue.outputs.body) }}
            ].join('\n');

            const { data: pr } = await github.rest.pulls.create({ ...repo, title, head, base, body, draft: isDraft });

            const labels = JSON.parse('${{ steps.issue.outputs.labels }}').map(l => typeof l === 'string' ? l : l.name);
            if (labels.length) await github.rest.issues.addLabels({ ...repo, issue_number: pr.number, labels });


            const milestone = '${{ steps.issue.outputs.milestone }}';
            if (milestone) await github.rest.issues.update({ ...repo, issue_number: pr.number, milestone: Number(milestone) });


            const refreshedAssignees = JSON.parse('${{ steps.issue.outputs.assignees }}');
            const finalAssignees = refreshedAssignees.length ? refreshedAssignees : ['${{ github.event.issue.user.login }}'];
            await github.rest.issues.addAssignees({ ...repo, issue_number: pr.number, assignees: finalAssignees });

            core.setOutput('pr_number', String(pr.number));
            core.setOutput('pr_url', pr.html_url);

      - name: Rename branch to PR-numbered name
        id: rename
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const mode = '${{ steps.issue.outputs.mode }}';         
            const slug = '${{ steps.meta.outputs.slug }}';
            const oldName = '${{ steps.meta.outputs.tmpBranch }}';  
            const prNumber = Number('${{ steps.createpr.outputs.pr_number }}');
            const newName = `${mode}/${prNumber}-${slug}`;

            try {
              await github.request('POST /repos/{owner}/{repo}/branches/{branch}/rename', {
                owner: repo.owner,
                repo: repo.repo,
                branch: oldName,     
                new_name: newName
              });
              core.info(`Renamed branch '${oldName}' -> '${newName}'`);
            } catch (err) {
              core.warning(`Rename API failed (${err.status || 'n/a'}): ${err.message}`);
            }

            core.setOutput('new_branch', newName);
