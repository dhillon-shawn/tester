name: Create branch and draft pr for issues
on:
  issues:
    types: [opened]

permissions:
  write-all

jobs:
  assign:
    runs-on: ubuntu-latest
    steps:

      - name: Check if issue has assignees
        id: check
        if: github.event.action == 'opened'
        run: |
                if [ "${{ toJson(github.event.issue.assignees) }}" = "[]" ]; then
                  echo "Issue has no assignees."
                  echo "has_assignees=false" >> $GITHUB_OUTPUT
                else
                  echo "Issue has assignees."
                  echo "has_assignees=true" >> $GITHUB_OUTPUT
                fi


      - name: 'Auto-assign issue'
        uses: pozil/auto-assign-issue@v2
        if: steps.check.outputs.has_assignees == 'false' && github.event.action == 'opened'
        with:
                  assignees: '${{ github.event.issue.user.login }}'
                  numOfAssignee: 1
                  
      - name: Refresh issue data
        id: issue
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const num = context.payload.issue.number;
            const { data: issue } = await github.rest.issues.get({ ...repo, issue_number: num });
            core.setOutput('title', issue.title || '');
            core.setOutput('body', issue.body || '');
            core.setOutput('labels', JSON.stringify(issue.labels || []));
            core.setOutput('assignees', JSON.stringify((issue.assignees || []).map(a => a.login)));
            core.setOutput('milestone', issue.milestone ? String(issue.milestone.number) : '');
            core.setOutput('hasFeature', String((issue.labels || []).some(l => (typeof l === 'string' ? l : l.name) === 'feature')));
            core.setOutput('hasHotfix', String((issue.labels || []).some(l => (typeof l === 'string' ? l : l.name) === 'hotfix')));

      # --- 2) Collect metadata (default, next PR#, branch name, draft flag) ---
      - name: Derive branch & PR metadata
        id: meta
        uses: actions/github-script@v7
        with:
          script: |
            const { repository } = context.payload;
            const defaultBranch = repository.default_branch;

            // Next PR number = last PR number + 1 (simple by design)
            const { data: prs } = await github.rest.pulls.list({
              ...context.repo, state: 'all', per_page: 1, sort: 'created', direction: 'desc'
            });
            const nextPrNumber = (prs[0]?.number || 0) + 1;

            // Decide mode (feature vs hotfix) from refreshed labels
            const hasFeature = ${{ steps.issue.outputs.hasFeature == 'true' && 'true' || 'false' }};
            const hasHotfix = ${{ steps.issue.outputs.hasHotfix == 'true' && 'true' || 'false' }};
            const mode = hasFeature === true ? 'feature' : (hasHotfix === true ? 'hotfix' : null);
            if (!mode) { core.setFailed('Issue has neither feature nor hotfix label.'); return; }

            const rawTitle = `${{ toJson(steps.issue.outputs.title) }}`.slice(1,-1); // dequote
            const slug = (rawTitle || mode)
              .toLowerCase().replace(/[^a-z0-9]+/g, '-').replace(/^-+|-+$/g, '').slice(0, 50) || mode;

            const branch = `${mode}/${nextPrNumber}-${slug}`;
            const isDraft = mode === 'feature'; // feature => draft, hotfix => regular

            core.setOutput('default', defaultBranch);
            core.setOutput('branch', branch);
            core.setOutput('nextPr', String(nextPrNumber));
            core.setOutput('mode', mode);
            core.setOutput('isDraft', String(isDraft));

      # --- 3) Create and push the branch (shallow checkout is fine) ---
      - name: Check out default branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.meta.outputs.default }}

      - name: Create branch and push empty commit
        env:
          BRANCH: ${{ steps.meta.outputs.branch }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          MODE: ${{ steps.meta.outputs.mode }}
        run: |
          set -eux
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git switch -c "$BRANCH"
          git commit --allow-empty -m "chore: init ${MODE} branch for #${ISSUE_NUMBER} [skip ci]"
          git push --set-upstream origin "$BRANCH"

      # --- 4) Open PR and copy labels/milestone/assignees (from REFRESHED issue) ---
      - name: Open PR and copy details
        id: createpr
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const issue_number = context.payload.issue.number;
            const base = '${{ steps.meta.outputs.default }}';
            const head = '${{ steps.meta.outputs.branch }}';
            const isDraft = '${{ steps.meta.outputs.isDraft }}' === 'true';

            const title = (isDraft ? 'feat: ' : 'fix: ') + ${{ toJson(steps.issue.outputs.title) }};
            const body = [
              `${isDraft ? 'Draft PR' : 'PR'} for issue #${issue_number}`,
              '',
              `Closes #${issue_number}`,
              '',
              '---',
              ${{ toJson(steps.issue.outputs.body) }}
            ].join('\n');

            const { data: pr } = await github.rest.pulls.create({
              ...repo,
              title, head, base, body,
              draft: isDraft
            });

            // Labels
            const labels = JSON.parse('${{ steps.issue.outputs.labels }}').map(l => typeof l === 'string' ? l : l.name);
            if (labels.length) await github.rest.issues.addLabels({ ...repo, issue_number: pr.number, labels });

            // Milestone
            const milestone = '${{ steps.issue.outputs.milestone }}';
            if (milestone) {
              await github.rest.issues.update({ ...repo, issue_number: pr.number, milestone: Number(milestone) });
            }

            // Assignees: use refreshed issue's assignees; if still none, assign creator
            const refreshedAssignees = JSON.parse('${{ steps.issue.outputs.assignees }}');
            const finalAssignees = refreshedAssignees.length ? refreshedAssignees : ['${{ github.event.issue.user.login }}'];
            await github.rest.issues.addAssignees({ ...repo, issue_number: pr.number, assignees: finalAssignees });

            core.setOutput('url', pr.html_url)
