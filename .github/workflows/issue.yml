name: Create branch and PR for issues

on:
  issues:
    types: [opened]

permissions:
  contents: write        # create/push branches
  pull-requests: write   # open PRs and set labels/assignees/milestone
  issues: write          # update issue (auto-assign)

# Concurrency gate around "next PR number" allocation.
# If two issues open at once, the newer run will cancel the older one (acts like "fail one").
concurrency:
  group: pr-number-allocator
  cancel-in-progress: true

jobs:
  issue_to_pr:
    if: >
      contains(join(github.event.issue.labels.*.name, ','), 'feature') ||
      contains(join(github.event.issue.labels.*.name, ','), 'hotfix')
    runs-on: ubuntu-latest

    steps:
      # 1) Ensure the issue has an assignee (assign creator if none)
      - name: Check if issue has assignees
        id: check
        run: |
          if [ "${{ toJson(github.event.issue.assignees) }}" = "[]" ]; then
            echo "has_assignees=false" >> $GITHUB_OUTPUT
          else
            echo "has_assignees=true" >> $GITHUB_OUTPUT
          fi

      - name: Auto-assign issue (to creator if none)
        if: steps.check.outputs.has_assignees == 'false'
        uses: pozil/auto-assign-issue@v2
        with:
          assignees: "${{ github.event.issue.user.login }}"
          numOfAssignee: 1

      # 2) Re-fetch issue so we see the (possibly new) assignees
      - name: Refresh issue data
        id: issue
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const num = context.payload.issue.number;
            const { data: issue } = await github.rest.issues.get({ ...repo, issue_number: num });

            const labels = (issue.labels || []).map(l => typeof l === 'string' ? l : l.name);
            const mode = labels.includes('hotfix') ? 'hotfix' : 'feature';

            core.setOutput('title', issue.title || '');
            core.setOutput('body', issue.body || '');
            core.setOutput('labels', JSON.stringify(labels));
            core.setOutput('assignees', JSON.stringify((issue.assignees || []).map(a => a.login)));
            core.setOutput('milestone', issue.milestone ? String(issue.milestone.number) : '');
            core.setOutput('mode', mode);

      # 3) Derive "next PR number" and branch name (with logging)
      - name: Derive metadata (robust next PR number + logging)
        id: meta
        uses: actions/github-script@v7
        with:
          script: |
            const mode = '${{ steps.issue.outputs.mode }}';
            const defaultBranch = context.payload.repository.default_branch;

            // Fetch a handful of PRs and take the max(number) to guard against odd sort artifacts
            // (imports/backfills/clock skew). We also log what we saw.
            const pageSize = 50; // small + fast
            const { data: prs } = await github.rest.pulls.list({
              ...context.repo, state: 'all', per_page: pageSize, sort: 'created', direction: 'desc'
            });

            const numbers = prs.map(p => p.number);
            const lastPrNumber = numbers.length ? Math.max(...numbers) : 0;
            const nextPrNumber = lastPrNumber + 1;

            // Build slug & branch
            const rawTitle = ${{ toJson(steps.issue.outputs.title) }};
            const title = rawTitle || mode;
            const slug = title.toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/^-+|-+$/g,'').slice(0,50) || mode;

            const branch = `${mode}/${nextPrNumber}-${slug}`;
            const isDraft = mode === 'feature';
            const prTitlePrefix = isDraft ? 'feat: ' : 'fix: ';

            core.info(`PR numbering: observed=${numbers.slice(0,10).join(', ') || '(none)'}`);
            core.info(`Chosen next PR number: ${nextPrNumber} (max=${lastPrNumber} + 1)`);
            core.info(`Branch to create: ${branch}`);
            core.info(`Default branch: ${defaultBranch} | Mode: ${mode} | Draft: ${isDraft}`);

            core.setOutput('default', defaultBranch);
            core.setOutput('branch', branch);
            core.setOutput('nextPr', String(nextPrNumber));
            core.setOutput('isDraft', String(isDraft));
            core.setOutput('prTitlePrefix', prTitlePrefix);
            core.setOutput('slug', slug);

      - name: Verify PR number vs planned (log only)
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const planned = Number('${{ steps.meta.outputs.nextPr }}');
            const actual  = Number('${{ steps.createpr.outputs.pr_number }}');
            if (planned !== actual) {
              core.warning(`Planned PR number was ${planned}, but GitHub assigned ${actual}. `
                + `Branch remains '${{ steps.meta.outputs.branch }}' (no rename per design).`);
            } else {
              core.info(`PR number matched plan: ${actual}.`);
            }


      # 4) Create the branch at default tip and push a single empty commit
      - name: Check out default branch
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.meta.outputs.default }}

      - name: Create branch and push empty commit
        env:
          BRANCH: ${{ steps.meta.outputs.branch }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          MODE: ${{ steps.issue.outputs.mode }}
        run: |
          set -eux
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git switch -c "$BRANCH"
          git commit --allow-empty -m "chore: init ${MODE} branch for #${ISSUE_NUMBER} [skip ci]"
          git push --set-upstream origin "$BRANCH"

      # 5) Open the PR and copy details (labels, milestone, assignees)
      - name: Open PR and copy details
        id: createpr
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const issue_number = context.payload.issue.number;
            const base = '${{ steps.meta.outputs.default }}';
            const head = '${{ steps.meta.outputs.branch }}';
            const isDraft = '${{ steps.meta.outputs.isDraft }}' === 'true';

            const title = '${{ steps.meta.outputs.prTitlePrefix }}' + ${{ toJson(steps.issue.outputs.title) }};
            const body = [
              `${isDraft ? 'Draft PR' : 'PR'} for issue #${issue_number}`,
              '',
              `Closes #${issue_number}`,
              '',
              '---',
              ${{ toJson(steps.issue.outputs.body) }}
            ].join('\n');

            const { data: pr } = await github.rest.pulls.create({
              ...repo, title, head, base, body, draft: isDraft
            });

            // Labels
            const labels = JSON.parse('${{ steps.issue.outputs.labels }}');
            if (labels.length) {
              await github.rest.issues.addLabels({ ...repo, issue_number: pr.number, labels });
            }

            // Milestone
            const milestone = '${{ steps.issue.outputs.milestone }}';
            if (milestone) {
              await github.rest.issues.update({ ...repo, issue_number: pr.number, milestone: Number(milestone) });
            }

            // Assignees: if issue has any, use them; else assign the issue creator
            const refreshedAssignees = JSON.parse('${{ steps.issue.outputs.assignees }}');
            const finalAssignees = refreshedAssignees.length ? refreshedAssignees : ['${{ github.event.issue.user.login }}'];
            await github.rest.issues.addAssignees({ ...repo, issue_number: pr.number, assignees: finalAssignees });

            core.setOutput('pr_number', String(pr.number));
            core.setOutput('pr_url', pr.html_url);

      # (Optional) Comment back on the issue with the PR link
      - name: Comment PR link on the issue (optional)
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              ...context.repo,
              issue_number: context.payload.issue.number,
              body: `âœ… Opened ${'${{ steps.issue.outputs.mode }}' === 'feature' ? 'draft ' : ''}PR: ${{ steps.createpr.outputs.pr_url }}\nBranch: \`${{ steps.meta.outputs.branch }}\``
            })
