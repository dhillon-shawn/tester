name: issue-reopen-get-rc-version
on:
  issues:
    types: [reopened]

permissions:
  contents: read
  issues: read

jobs:
  rc-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-meta.outputs.version }}
      rc_tag:   ${{ steps.get-meta.outputs.rc_tag }}
      pr:       ${{ steps.get-meta.outputs.pr }}

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RC_META_PATH: rc-meta.json

    steps:
      - name: Resolve PR that closed this issue (GraphQL first, REST fallback)
        id: who-closed
        shell: bash
        run: |
          set -euo pipefail
          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          issue="${{ github.event.issue.number }}"

          # --- Try GraphQL: issue.closedByPullRequestsReferences (noise-free) ---
          read -r -d '' Q <<'GQL'
          query($owner:String!, $repo:String!, $n:Int!) {
            repository(owner:$owner, name:$repo) {
              issue(number:$n) {
                closedByPullRequestsReferences(last: 1) {
                  nodes { number merged mergedAt }
                }
              }
            }
          }
          GQL
          pr=$(gh api graphql -f owner="$owner" -f repo="$repo" -F n="$issue" -f query="$Q" \
               --jq '.data.repository.issue.closedByPullRequestsReferences.nodes[0].number' 2>/dev/null || echo "")

          if [[ -z "${pr}" || "${pr}" == "null" ]]; then
            # --- Fallback: REST -> issue events -> closed.commit_id -> commitâ†’pulls ---
            close_commit=$(gh api "repos/$owner/$repo/issues/$issue/events" --paginate \
              --jq '[.[] | select(.event=="closed" and .commit_id!=null)] | last | .commit_id' \
              2>/dev/null || echo "")
            if [[ -z "${close_commit}" || "${close_commit}" == "null" ]]; then
              echo "Could not find closing commit for issue #$issue" >&2
              exit 1
            fi
            # PRs associated with that commit (the merged PR that introduced it to default)
            pr=$(gh api "repos/$owner/$repo/commits/$close_commit/pulls" \
                  -H "Accept: application/vnd.github+json" --jq '.[0].number' 2>/dev/null || echo "")
          fi

          [[ -n "${pr}" && "${pr}" != "null" ]] || { echo "No PR found for issue #$issue"; exit 1; }
          echo "pr=$pr" >> "$GITHUB_OUTPUT"

      - name: Download rc-meta.json from rc-pr-<PR> and extract version
        id: get-meta
        shell: bash
        run: |
          set -euo pipefail
          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          pr="${{ steps.who-closed.outputs.pr }}"
          rc_tag="rc-pr-${pr}"
          meta_path="$RC_META_PATH"
          target="meta/$(basename "$meta_path")"
          mkdir -p meta

          if gh release view "$rc_tag" >/dev/null 2>&1; then
            gh release download "$rc_tag" -p "$(basename "$meta_path")" -D meta >/dev/null 2>&1 \
              || gh api "repos/$owner/$repo/contents/$meta_path?ref=$rc_tag" --jq '.content' | base64 -d > "$target"
          else
            gh api "repos/$owner/$repo/contents/$meta_path?ref=$rc_tag" --jq '.content' | base64 -d > "$target"
          fi

          [[ -s "$target" ]] || { echo "rc-meta.json not found at $meta_path in $rc_tag"; exit 1; }
          version=$(jq -r '.version // .Version // .VERSION // empty' "$target")
          [[ -n "$version" && "$version" != "null" ]] || { echo "No version key in $target"; exit 1; }

          echo "version=$version" >> "$GITHUB_OUTPUT"
          echo "rc_tag=$rc_tag"   >> "$GITHUB_OUTPUT"
          echo "pr=$pr"           >> "$GITHUB_OUTPUT"

      - name: Summary
        run: |
          echo "PR:       ${{ steps.get-meta.outputs.pr }}"
          echo "RC Tag:   ${{ steps.get-meta.outputs.rc_tag }}"
          echo "Version:  ${{ steps.get-meta.outputs.version }}"
