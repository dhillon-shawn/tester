name: rollback on issue reopen
on:
  issues:
    types: [reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  rollback:
    if: >
      !contains(toJson(github.event.issue), '"pull_request"') &&
      (contains(join(github.event.issue.labels.*.name, ','), 'release') ||
       contains(join(github.event.issue.labels.*.name, ','), 'hotfix'))
    runs-on: ubuntu-latest

    steps:
      - name: resolve merged PR (and rc-meta)
        id: find
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const issueNum = context.payload.issue.number;
            // merged PR that closed this issue
            const q = `repo:${repo.owner}/${repo.repo} is:pr is:merged in:body "Closes #${issueNum}"`;
            const s = await github.rest.search.issuesAndPullRequests({ q, per_page: 1, sort: 'updated', order: 'desc' });
            if (!s.data.items.length) core.setFailed(`no merged PR found for issue #${issueNum}`);
            const prNum = s.data.items[0].number;
            const pr = (await github.rest.pulls.get({ ...repo, pull_number: prNum })).data;
            if (!pr.merged) core.setFailed(`PR #${prNum} not merged`);
            // Optional: read rc-meta.json from tag rc-pr-<PR#> (non-deprecated endpoints)
            try {
              const rel = await github.rest.repos.getReleaseByTag({ ...repo, tag: `rc-pr-${pr.number}` });
              const asset = (rel.data.assets || []).find(a => a.name === 'rc-meta.json');
              if (asset) {
                const bin = await github.request('GET /repos/{owner}/{repo}/releases/assets/{asset_id}', {
                  owner: repo.owner, repo: repo.repo, asset_id: asset.id,
                  headers: { accept: 'application/octet-stream' }
                });
                const meta = JSON.parse(Buffer.from(bin.data).toString('utf8'));
                core.info(`rc-meta: version=${meta.version || ''} commit=${meta.commit || ''}`);
              }
            } catch {}
            // outputs
            core.setOutput('pr_node_id', pr.node_id);
            core.setOutput('pr_number', String(pr.number));
            core.setOutput('base_ref', pr.base.ref);
            core.setOutput('head_ref', pr.head.ref || '');
            core.setOutput('head_sha', pr.head.sha || '');
            core.setOutput('title', pr.title || '');
      - name: open revert PR
        id: revert
        uses: actions/github-script@v7
        with:
          script: |
            const prId = '${{ steps.find.outputs.pr_node_id }}';
            const m = `mutation($input: RevertPullRequestInput!){
              revertPullRequest(input:$input){ pullRequest{ number url headRefName baseRefName } }
            }`;
            const r = await github.graphql(m, { input: { pullRequestId: prId }});
            const rp = r?.revertPullRequest?.pullRequest;
            if (!rp) core.setFailed('revertPullRequest failed');
            core.info(`revert PR: #${rp.number} ${rp.url} head=${rp.headRefName} base=${rp.baseRefName}`);
            core.setOutput('number', String(rp.number));

