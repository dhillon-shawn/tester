name: issue-reopen-get-rc-version

on:
  issues:
    types: [reopened]

permissions:
  contents: read
  issues: read

jobs:
  rc-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-meta.outputs.version }}
      rc_tag: ${{ steps.find-pr.outputs.rc_tag }}
      pr_number: ${{ steps.find-pr.outputs.pr_number }}

    env:
      RC_META_PATH: rc-meta.json            # change if needed
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # gh uses this automatically

    steps:
      - name: Find merged PR that closed this issue â†’ rc tag
        id: find-pr
        shell: bash
        run: |
          set -euo pipefail

          OWNER="${GITHUB_REPOSITORY%/*}"
          REPO="${GITHUB_REPOSITORY#*/}"
          ISSUE_NUMBER="${{ github.event.issue.number }}"

          read -r -d '' QUERY <<'GRAPHQL'
          query($owner:String!, $repo:String!, $issue:Int!) {
            repository(owner:$owner, name:$repo) {
              issue(number:$issue) {
                timelineItems(itemTypes: CROSS_REFERENCED_EVENT, first: 100) {
                  nodes {
                    ... on CrossReferencedEvent {
                      willCloseTarget
                      source {
                        __typename
                        ... on PullRequest { number merged mergedAt }
                      }
                    }
                  }
                }
              }
            }
          }
          GRAPHQL

          response=$(gh api graphql -f owner="$OWNER" -f repo="$REPO" -F issue="$ISSUE_NUMBER" -f query="$QUERY")

          PR_NUMBER=$(jq -r '
            .data.repository.issue.timelineItems.nodes
            | map(select(.willCloseTarget == true and .source.__typename == "PullRequest" and .source.merged == true))
            | sort_by(.source.mergedAt) | last | .source.number // empty
          ' <<<"$response")

          if [[ -z "${PR_NUMBER:-}" || "$PR_NUMBER" == "null" ]]; then
            echo "No merged PR found that closed issue #$ISSUE_NUMBER" >&2
            exit 1
          fi

          RC_TAG="rc-pr-${PR_NUMBER}"

          echo "owner=$OWNER"           >> "$GITHUB_OUTPUT"
          echo "repo=$REPO"             >> "$GITHUB_OUTPUT"
          echo "pr_number=$PR_NUMBER"   >> "$GITHUB_OUTPUT"
          echo "rc_tag=$RC_TAG"         >> "$GITHUB_OUTPUT"

      - name: Download rc-meta.json (release asset or tag) and extract version
        id: get-meta
        shell: bash
        run: |
          set -euo pipefail

          OWNER="${{ steps.find-pr.outputs.owner }}"
          REPO="${{ steps.find-pr.outputs.repo }}"
          RC_TAG="${{ steps.find-pr.outputs.rc_tag }}"
          RC_META_PATH="${RC_META_PATH}"

          mkdir -p meta
          TARGET_FILE="meta/$(basename "$RC_META_PATH")"

          # Try release asset first
          if gh release view "$RC_TAG" >/dev/null 2>&1; then
            echo "Found release $RC_TAG. Trying asset $(basename "$RC_META_PATH")..."
            if gh release download "$RC_TAG" -p "$(basename "$RC_META_PATH")" -D meta >/dev/null 2>&1; then
              echo "Downloaded release asset to $TARGET_FILE"
            else
              echo "Asset not found in release; fetching from repo at ref $RC_TAG..."
              gh api "repos/$OWNER/$REPO/contents/$RC_META_PATH?ref=$RC_TAG" --jq '.content' | base64 -d > "$TARGET_FILE"
            fi
          else
            echo "Release $RC_TAG not found; fetching from repo at ref $RC_TAG..."
            gh api "repos/$OWNER/$REPO/contents/$RC_META_PATH?ref=$RC_TAG" --jq '.content' | base64 -d > "$TARGET_FILE"
          fi

          if [[ ! -s "$TARGET_FILE" ]]; then
            echo "rc-meta.json not found at $RC_META_PATH in tag/release $RC_TAG" >&2
            exit 1
          fi

          VERSION=$(jq -r '.version // .Version // .VERSION // empty' "$TARGET_FILE")
          if [[ -z "${VERSION:-}" || "$VERSION" == "null" ]]; then
            echo "No 'version' key found in $TARGET_FILE" >&2
            exit 1
          fi

          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "RC Tag: $RC_TAG"
          echo "Version: $VERSION"
