name: issue-reopen-get-rc-version
on:
  issues:
    types: [reopened]

permissions:
  contents: read
  issues: read

jobs:
  rc-version:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      RC_META_PATH: rc-meta.json   # change if your file lives elsewhere

    steps:
      - name: Get PR that closed this issue (from timeline "closed in #<PR>")
        id: pr
        shell: bash
        run: |
          set -euo pipefail
          set -x

          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          issue="${{ github.event.issue.number }}"

          # Look for the final "closed" timeline event that carries a PR in `source.issue`
          pr_number=$(
            gh api "repos/$owner/$repo/issues/$issue/timeline" \
              --paginate \
              -H "Accept: application/vnd.github+json" \
              --jq '
                [ .[]
                  | select(
                      .event == "closed"
                      and .source != null
                      and .source.type == "issue"
                      and (.source.issue.pull_request|type) == "object"
                    )
                ]
                | last
                | .source.issue.number // empty
              '
          )

          if [[ -z "${pr_number:-}" ]]; then
            echo "No closing PR found in issue timeline for #$issue" >&2
            exit 1
          fi

          # (Optional) ensure that PR is merged
          merged=$(gh api "repos/$owner/$repo/pulls/$pr_number" --jq '.merged')
          if [[ "$merged" != "true" ]]; then
            echo "PR #$pr_number is not merged (merged=$merged)" >&2
            exit 1
          fi

          rc_tag="rc-pr-${pr_number}"

          echo "pr_number=$pr_number" >> "$GITHUB_OUTPUT"
          echo "rc_tag=$rc_tag"       >> "$GITHUB_OUTPUT"

          echo "Resolved closing PR: #$pr_number"
          echo "Derived tag: $rc_tag"

      - name: Download rc-meta.json and extract version
        id: meta
        shell: bash
        run: |
          set -euo pipefail
          set -x

          owner="${GITHUB_REPOSITORY%/*}"
          repo="${GITHUB_REPOSITORY#*/}"
          rc_tag="${{ steps.pr.outputs.rc_tag }}"
          meta_path="${RC_META_PATH}"
          out="meta/$(basename "$meta_path")"
          mkdir -p meta

          # Try release asset first; if not there, fetch the file at ref=rc_tag
          if gh release view "$rc_tag" >/dev/null 2>&1; then
            gh release download "$rc_tag" -p "$(basename "$meta_path")" -D meta >/dev/null 2>&1 \
              || gh api "repos/$owner/$repo/contents/$meta_path?ref=$rc_tag" --jq '.content' | base64 -d > "$out"
          else
            gh api "repos/$owner/$repo/contents/$meta_path?ref=$rc_tag" --jq '.content' | base64 -d > "$out"
          fi

          [[ -s "$out" ]] || { echo "rc-meta.json not found at $meta_path in $rc_tag"; exit 1; }

          version=$(jq -r '.version // .Version // .VERSION // empty' "$out")
          [[ -n "$version" && "$version" != "null" ]] || { echo "No version key in $out"; exit 1; }

          echo "version=$version" >> "$GITHUB_OUTPUT"

          {
            echo "PR:       ${{ steps.pr.outputs.pr_number }}"
            echo "RC Tag:   $rc_tag"
            echo "Version:  $version"
          } | tee -a "$GITHUB_STEP_SUMMARY"
