name: Rollback on issue reopen

on:
  issues:
    types: [reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  rollback:
    # Only handle real issues with the 'release' or 'hotfix' label
    if: >
      !contains(toJson(github.event.issue), '"pull_request"') &&
      (contains(join(github.event.issue.labels.*.name, ','), 'release') ||
       contains(join(github.event.issue.labels.*.name, ','), 'hotfix'))
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}

    steps:
      - name: find-merged-pr
        id: find
        run: |
          set -euo pipefail
          ISSUE=${{ github.event.issue.number }}
          echo "issue=$ISSUE"

          # Find merged PR that closed this issue (most recently updated)
          JSON=$(gh api -X GET search/issues \
            -f q="repo:${{ github.repository }} is:pr is:merged in:body \"Closes #${ISSUE}\"" \
            -f sort=updated -f order=desc)
          PR=$(jq -r '.items[0].number // empty' <<<"$JSON")
          test -n "$PR" || { echo "no merged PR found for #$ISSUE"; exit 1; }

          # PR details
          PJSON=$(gh api repos/{owner}/{repo}/pulls/$PR)
          MERGE_SHA=$(jq -r '.merge_commit_sha // empty' <<<"$PJSON")
          BASE_REF=$(jq -r '.base.ref' <<<"$PJSON")
          HEAD_SHA=$(jq -r '.head.sha' <<<"$PJSON")
          HEAD_REF=$(jq -r '.head.ref' <<<"$PJSON")
          TITLE=$(jq -r '.title' <<<"$PJSON")

          echo "pr=$PR base=$BASE_REF merge_sha=$MERGE_SHA head_sha=$HEAD_SHA head_ref=$HEAD_REF title=$TITLE"

          {
            echo "pr=$PR"
            echo "base=$BASE_REF"
            echo "merge_sha=$MERGE_SHA"
            echo "head_sha=$HEAD_SHA"
            echo "head_ref=$HEAD_REF"
            echo "title=$TITLE"
          } >> "$GITHUB_OUTPUT"

      - name: fetch-rc-meta
        id: rc
        uses: dsaltares/fetch-gh-release-asset@master
        continue-on-error: true
        with:
          repo: ${{ github.repository }}
          version: tags/rc-pr-${{ steps.find.outputs.pr }}
          file: rc-meta.json
          target: rc-meta.json
          token: ${{ github.token }}

      - name: log-rc-meta
        run: |
          if [ -f rc-meta.json ]; then
            echo "rc-meta.json:"
            cat rc-meta.json
            VER=$(jq -r '.version // empty' rc-meta.json)
            PKG=$(jq -r '.package // empty' rc-meta.json)
            COMMIT=$(jq -r '.commit // empty' rc-meta.json)
            echo "version=$VER package=$PKG release_commit=$COMMIT"
          else
            echo "rc-meta.json not found on tag rc-pr-${{ steps.find.outputs.pr }}"
          fi

      - name: checkout-base
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.find.outputs.base }}

      - name: revert-merge
        id: rev
        run: |
          set -euo pipefail
          PR=${{ steps.find.outputs.pr }}
          TITLE='${{ steps.find.outputs.title }}'

          # branch: revert/pr-<PR>-<slug>
          slug="$(printf "%s" "$TITLE" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g; s/^-+|-+$//g; s/^$/revert/')"
          BRANCH="revert/pr-${PR}-${slug}"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"
          echo "creating revert branch: $BRANCH"

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git switch -c "$BRANCH"

          SHA='${{ steps.find.outputs.merge_sha }}'
          if [ -z "$SHA" ]; then
            echo "merge_sha empty (likely squash/rebase). Using PR head sha."
            SHA='${{ steps.find.outputs.head_sha }}'
          fi

          PARENTS=$(git cat-file -p "$SHA" | grep -c '^parent ' || true)
          echo "reverting sha=$SHA parents=$PARENTS"
          if [ "${PARENTS:-0}" -ge 2 ]; then
            git revert -m 1 "$SHA" --no-edit
          else
            git revert "$SHA" --no-edit
          fi

          git push --set-upstream origin "$BRANCH"
          echo "pushed $BRANCH"

      - name: open-revert-pr
        id: open
        run: |
          set -euo pipefail
          PR=${{ steps.find.outputs.pr }}
          ISSUE=${{ github.event.issue.number }}
          BASE='${{ steps.find.outputs.base }}'
          HEAD='${{ steps.rev.outputs.branch }}'

          TITLE="revert: PR #${PR} â€“ ${{ steps.find.outputs.title }}"
          BODY="Reverts merge from PR #${PR} (issue #${ISSUE} reopened).
            Base: \`${BASE}\`
            $( [ -f rc-meta.json ] && jq -r '"Version: \(.version)\nRelease commit: \(.commit)"' rc-meta.json || true )
            ---
            ${{ github.event.issue.body || '' }}"

          echo "creating PR: head=$HEAD -> base=$BASE"
          URL=$(gh pr create --title "$TITLE" --body "$BODY" --base "$BASE" --head "$HEAD")
          NUM=$(gh pr view "$URL" --json number -q .number)
          echo "url=$URL"   >> "$GITHUB_OUTPUT"
          echo "number=$NUM" >> "$GITHUB_OUTPUT"
          echo "opened revert PR #$NUM at $URL"

          # copy labels/milestone/assignees from the issue
          ILABELS=$(gh api repos/{owner}/{repo}/issues/${ISSUE} --jq '[.labels[].name]')
          if [ "$ILABELS" != "[]" ]; then
            for l in $(jq -r '.[]' <<<"$ILABELS"); do gh pr edit "$NUM" --add-label "$l"; done
          fi
          MILE=$(gh api repos/{owner}/{repo}/issues/${ISSUE} --jq '.milestone.number // empty')
          if [ -n "$MILE" ]; then gh pr edit "$NUM" --milestone "$MILE"; fi
          IASSIGNEES=$(gh api repos/{owner}/{repo}/issues/${ISSUE} --jq '[.assignees[].login]')
          if [ "$IASSIGNEES" = "[]" ]; then
            gh pr edit "$NUM" --add-assignee "${{ github.event.issue.user.login }}"
          else
            for a in $(jq -r '.[]' <<<"$IASSIGNEES"); do gh pr edit "$NUM" --add-assignee "$a"; done
          fi

      - name: restore-branch
        run: |
          set -euo pipefail
          HEAD_SHA='${{ steps.find.outputs.head_sha }}'
          PR=${{ steps.find.outputs.pr }}
          SRC='${{ steps.find.outputs.head_ref }}'
          [ -n "$HEAD_SHA" ] || { echo "no head_sha available; skip restore"; exit 0; }
          slug="$(printf "%s" "$SRC" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g; s/^-+|-+$//g; s/^$/pr-'$PR'/')"
          REF="refs/heads/restore/pr-${PR}-${slug}"
          echo "creating restore ref: $REF at $HEAD_SHA"
          gh api -X POST repos/{owner}/{repo}/git/refs -f ref="$REF" -f sha="$HEAD_SHA" \
            || echo "restore ref exists: $REF"
