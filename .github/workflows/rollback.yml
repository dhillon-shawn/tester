name: restore-branch-and-open-pr on issue reopen

on:
  issues:
    types: [reopened]

permissions:
    write-all

jobs:
  restore_and_pr:
    if: contains(join(github.event.issue.labels.*.name, ','), 'release') || contains(join(github.event.issue.labels.*.name, ','), 'hotfix')
    runs-on: ubuntu-latest

    steps:
      - name: find_merged_pr
        id: find
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const issue_number = context.payload.issue.number;

            const query = `repo:${repo.owner}/${repo.repo} is:pr is:merged in:body "Closes #${issue_number}"`;
            const search = await github.rest.search.issuesAndPullRequests({
              q: query, per_page: 1, sort: 'updated', order: 'desc'
            });
            if (!search.data.items.length) core.setFailed(`no merged pr found for issue #${issue_number}`);

            const pr_number = search.data.items[0].number;
            const pr = (await github.rest.pulls.get({ ...repo, pull_number: pr_number })).data;
            if (!pr.merged) core.setFailed(`pr #${pr_number} is not merged`);

            const issue = context.payload.issue;
            const issue_title = issue.title || pr.title || '';
            const issue_body  = issue.body  || '';
            const labels      = (issue.labels || []).map(l => typeof l === 'string' ? l : l.name);
            const assignees   = (issue.assignees || []).map(a => a.login);
            const milestone   = issue.milestone ? String(issue.milestone.number) : '';

            core.info(`restore target: pr=${pr.number} base=${pr.base.ref} head_ref=${pr.head.ref} head_sha=${pr.head.sha}`);

            core.setOutput('pr_number', String(pr.number));
            core.setOutput('base_ref', pr.base.ref);
            core.setOutput('head_ref', pr.head.ref || '');
            core.setOutput('head_sha', pr.head.sha || '');
            core.setOutput('issue_title', issue_title);
            core.setOutput('issue_body', issue_body);
            core.setOutput('labels_json', JSON.stringify(labels));
            core.setOutput('assignees_json', JSON.stringify(assignees));
            core.setOutput('milestone', milestone);

      - name: restore_branch_exact_name
        id: restore
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const head_ref = '${{ steps.find.outputs.head_ref }}';
            const head_sha = '${{ steps.find.outputs.head_sha }}';
            if (!head_ref || !head_sha) core.setFailed('missing head_ref or head_sha');

            try {
              // exact equivalent of “Restore branch”: recreate the ref at the PR head sha
              await github.rest.git.createRef({ ...repo, ref: `refs/heads/${head_ref}`, sha: head_sha });
              core.info(`restored branch: ${head_ref} @ ${head_sha}`);
            } catch (e) {
              if (e.status === 422) {
                // already exists — that’s fine, just proceed
                core.info(`branch already exists: ${head_ref}`);
              } else {
                throw e;
              }
            }
            core.setOutput('restored_head', head_ref);

      - name: open_pr_from_restored_branch
        id: open
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const base_ref = '${{ steps.find.outputs.base_ref }}';
            const head_ref = '${{ steps.restore.outputs.restored_head }}';
            const pr_number = Number('${{ steps.find.outputs.pr_number }}');

            const title = `follow-up for pr #${pr_number}`;
            const body  = [
              `restored branch \`${head_ref}\` (matches the UI "Restore branch").`,
              '',
              '---',
              ${{ toJson(steps.find.outputs.issue_body) }}
            ].join('\n');

            const pr = (await github.rest.pulls.create({
              ...repo, title, head: head_ref, base: base_ref, body, draft: false
            })).data;

            // mirror issue metadata
            const labels = JSON.parse('${{ steps.find.outputs.labels_json }}');
            if (labels.length) await github.rest.issues.addLabels({ ...repo, issue_number: pr.number, labels });

            const milestone = '${{ steps.find.outputs.milestone }}';
            if (milestone) await github.rest.issues.update({ ...repo, issue_number: pr.number, milestone: Number(milestone) });

            const assignees = JSON.parse('${{ steps.find.outputs.assignees_json }}');
            const final_assignees = assignees.length ? assignees : ['${{ github.event.issue.user.login }}'];
            await github.rest.issues.addAssignees({ ...repo, issue_number: pr.number, assignees: final_assignees });

            core.info(`opened pr: #${pr.number} ${pr.html_url}`)
