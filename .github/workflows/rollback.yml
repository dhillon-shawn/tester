# .github/workflows/get-linked-pr.yml
name: Get linked PR on reopen

on:
  issues:
    types: [reopened]

permissions:
  issues: read
  pull-requests: read
  contents: read

jobs:
  linked-pr:
    runs-on: ubuntu-latest
    steps:
      - name: Find linked PR number
        id: find
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const { owner, repo } = context.repo;
            const issue = context.payload.issue.number;

            const query = `
              query($owner:String!, $repo:String!, $issue:Int!) {
                repository(owner:$owner, name:$repo) {
                  issue(number:$issue) {
                    timelineItems(itemTypes:[CONNECTED_EVENT, CROSS_REFERENCED_EVENT], first:100) {
                      nodes {
                        __typename
                        ... on ConnectedEvent {
                          subject {
                            __typename
                            ... on PullRequest {
                              number
                              merged
                              mergedAt
                              updatedAt
                              state
                            }
                          }
                        }
                        ... on CrossReferencedEvent {
                          willClose
                          source {
                            __typename
                            ... on PullRequest {
                              number
                              merged
                              mergedAt
                              updatedAt
                              state
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;

            const data = await github.graphql(query, { owner, repo, issue });

            // collect PRs from both "Linked pull requests" (ConnectedEvent)
            // and closing-keyword refs (CrossReferencedEvent)
            const prs = [];
            for (const n of data.repository.issue.timelineItems.nodes) {
              if (n.__typename === 'ConnectedEvent' && n.subject?.number) {
                prs.push(n.subject);
              } else if (n.__typename === 'CrossReferencedEvent' && n.source?.number) {
                // If you only want PRs that would close the issue, uncomment the next line:
                // if (!n.willClose) continue;
                prs.push(n.source);
              }
            }

            // de-dupe by PR number
            const map = new Map();
            for (const pr of prs) map.set(pr.number, pr);

            if (map.size === 0) {
              core.setFailed('No linked pull request found for this issue.');
              return;
            }

            // pick the most recently merged PR; otherwise most recently updated
            const byMerged = [...map.values()]
              .filter(pr => pr.merged && pr.mergedAt)
              .sort((a,b) => new Date(b.mergedAt) - new Date(a.mergedAt));

            const best = byMerged[0] ||
              [...map.values()].sort((a,b) => new Date(b.updatedAt) - new Date(a.updatedAt))[0];

            core.setOutput('pr_number', String(best.number));
            return String(best.number);

      - name: Use it
        run: echo "Linked PR #${{ steps.find.outputs.result }}"
