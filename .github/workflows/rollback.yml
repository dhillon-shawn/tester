name: rollback on issue reopen

on:
  issues:
    types: [reopened]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  rollback:
    if: >
      !contains(toJson(github.event.issue), '"pull_request"') &&
      (contains(join(github.event.issue.labels.*.name, ','), 'release') ||
       contains(join(github.event.issue.labels.*.name, ','), 'hotfix'))
    runs-on: ubuntu-latest

    steps:
      - name: resolve merged PR + rc-meta (logs)
        id: find
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const issueNumber = context.payload.issue.number;

            // Find merged PR that closed this issue
            const q = `repo:${repo.owner}/${repo.repo} is:pr is:merged in:body "Closes #${issueNumber}"`;
            const search = await github.rest.search.issuesAndPullRequests({ q, per_page: 1, sort: 'updated', order: 'desc' });
            if (!search.data.items.length) core.setFailed(`no merged PR found for issue #${issueNumber}`);
            const prNumber = search.data.items[0].number;

            // PR details
            const { data: pr } = await github.rest.pulls.get({ ...repo, pull_number: prNumber });
            if (!pr.merged) core.setFailed(`PR #${prNumber} is not merged`);

            core.info(`issue=#${issueNumber} -> pr=#${pr.number} base=${pr.base.ref} merge_sha=${pr.merge_commit_sha || '(none)'} head_sha=${pr.head.sha} head_ref=${pr.head.ref}`);

            // Try to read rc-meta.json from release tag rc-pr-<PR#>
            let rcMeta = {};
            try {
              const rel = await github.request('GET /repos/{owner}/{repo}/releases/tags/{tag}', {
                owner: repo.owner, repo: repo.repo, tag: `rc-pr-${pr.number}`
              });
              const asset = (rel.data.assets || []).find(a => a.name === 'rc-meta.json');
              if (asset) {
                const bin = await github.request('GET ' + asset.url, { headers: { Accept: 'application/octet-stream' } });
                rcMeta = JSON.parse(Buffer.from(bin.data).toString('utf8'));
                core.info(`rc-meta: version=${rcMeta.version || ''} commit=${rcMeta.commit || ''} package=${rcMeta.package || ''}`);
              } else {
                core.info(`rc-meta: rc-meta.json not found on tag rc-pr-${pr.number}`);
              }
            } catch (e) {
              core.info(`rc-meta: no tag rc-pr-${pr.number} (${e.status || 'n/a'})`);
            }

            // Pass along data for later steps
            const { data: issue } = await github.rest.issues.get({ ...repo, issue_number: issueNumber });
            core.setOutput('pr_number', String(pr.number));
            core.setOutput('pr_node_id', pr.node_id);
            core.setOutput('base_ref', pr.base.ref);
            core.setOutput('head_sha', pr.head.sha || '');
            core.setOutput('head_ref', pr.head.ref || '');
            core.setOutput('issue_title', issue.title || pr.title || '');
            core.setOutput('issue_body', issue.body || '');
            core.setOutput('labels', JSON.stringify((issue.labels||[]).map(l => typeof l === 'string' ? l : l.name)));
            core.setOutput('assignees', JSON.stringify((issue.assignees||[]).map(a => a.login)));
            core.setOutput('milestone', issue.milestone ? String(issue.milestone.number) : '');
            core.setOutput('rc_meta', JSON.stringify(rcMeta));

      - name: open revert PR via GraphQL (logs)
        id: revert
        uses: actions/github-script@v7
        with:
          script: |
            const prId = '${{ steps.find.outputs.pr_node_id }}';
            const mutation = `
              mutation($input: RevertPullRequestInput!) {
                revertPullRequest(input: $input) {
                  pullRequest { number url }
                }
              }`;
            const vars = { input: { pullRequestId: prId } };
            const resp = await github.graphql(mutation, vars);
            const rpr = resp?.revertPullRequest?.pullRequest;
            if (!rpr) core.setFailed('revertPullRequest returned no PR');
            core.info(`revert PR opened: #${rpr.number} ${rpr.url}`);
            core.setOutput('revert_number', String(rpr.number));
            core.setOutput('revert_url', rpr.url);

      - name: copy labels/milestone/assignees to revert PR
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const prNum = Number('${{ steps.revert.outputs.revert_number }}');
            const labels = JSON.parse('${{ steps.find.outputs.labels }}');
            if (labels.length) await github.rest.issues.addLabels({ ...repo, issue_number: prNum, labels });
            const milestone = '${{ steps.find.outputs.milestone }}';
            if (milestone) await github.rest.issues.update({ ...repo, issue_number: prNum, milestone: Number(milestone) });
            const assignees = JSON.parse('${{ steps.find.outputs.assignees }}');
            const fall = ['${{ github.event.issue.user.login }}'];
            await github.rest.issues.addAssignees({ ...repo, issue_number: prNum, assignees: assignees.length ? assignees : fall });

      - name: create restore branch at PR head (logs)
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const headSha = '${{ steps.find.outputs.head_sha }}';
            const headRef = '${{ steps.find.outputs.head_ref }}';
            const prNum   = '${{ steps.find.outputs.pr_number }}';
            if (!headSha) { core.info('restore: no head sha; skip'); return; }
            const slug = (headRef || `pr-${prNum}`).toLowerCase().replace(/[^a-z0-9]+/g,'-').replace(/^-+|-+$/g,'') || `pr-${prNum}`;
            const ref = `refs/heads/restore/pr-${prNum}-${slug}`;
            try {
              await github.rest.git.createRef({ ...repo, ref, sha: headSha });
              core.info(`restore: created ${ref} at ${headSha}`);
            } catch (e) {
              if (e.status === 422) core.info(`restore: exists ${ref}`); else throw e;
            }
