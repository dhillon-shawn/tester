name: hotfix branch from reopened issue

on:
  issues:
    types: [reopened]

permissions:
  write-all

jobs:
  hotfix_from_pr_head:
    # Only run for release/hotfix issues
    if: contains(join(github.event.issue.labels.*.name, ','), 'release') || contains(join(github.event.issue.labels.*.name, ','), 'hotfix')
    runs-on: ubuntu-latest

    steps:
      - name: resolve merged PR + (optional) rc-meta
        id: find
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const issueNum = context.payload.issue.number;

            // Find the merged PR that closed this issue
            const q = `repo:${repo.owner}/${repo.repo} is:pr is:merged in:body "Closes #${issueNum}"`;
            const s = await github.rest.search.issuesAndPullRequests({ q, per_page: 1, sort: 'updated', order: 'desc' });
            if (!s.data.items.length) core.setFailed(`No merged PR found for issue #${issueNum}`);
            const prNum = s.data.items[0].number;

            const pr = (await github.rest.pulls.get({ ...repo, pull_number: prNum })).data;
            if (!pr.merged) core.setFailed(`PR #${prNum} is not merged`);

            core.info(`issue=${issueNum} -> pr=${pr.number} base=${pr.base.ref} head_ref=${pr.head.ref} head_sha=${pr.head.sha}`);

            // Optional: read rc-meta.json from release tag rc-pr-<PR#>
            try {
              const rel = await github.rest.repos.getReleaseByTag({ ...repo, tag: `rc-pr-${pr.number}` });
              const asset = (rel.data.assets || []).find(a => a.name === 'rc-meta.json');
              if (asset) {
                const bin = await github.request('GET /repos/{owner}/{repo}/releases/assets/{asset_id}', {
                  owner: repo.owner, repo: repo.repo, asset_id: asset.id,
                  headers: { accept: 'application/octet-stream' }
                });
                const meta = JSON.parse(Buffer.from(bin.data).toString('utf8'));
                core.info(`rc-meta: version=${meta.version || ''} commit=${meta.commit || ''}`);
              } else {
                core.info('rc-meta: rc-meta.json not found on release');
              }
            } catch { core.info('rc-meta: tag not found'); }

            const iss = context.payload.issue;
            core.setOutput('pr_number', String(pr.number));
            core.setOutput('base_ref', pr.base.ref);
            core.setOutput('title', iss.title || pr.title || '');
            core.setOutput('body', iss.body || '');
            core.setOutput('labels', JSON.stringify((iss.labels||[]).map(l => typeof l === 'string' ? l : l.name)));
            core.setOutput('assignees', JSON.stringify((iss.assignees||[]).map(a => a.login)));
            core.setOutput('milestone', iss.milestone ? String(iss.milestone.number) : '');

      - name: checkout (minimal)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: create hotfix branch from PR head ref (with empty commit)
        id: branch
        env:
          PR_NUM: ${{ steps.find.outputs.pr_number }}
          TITLE: ${{ steps.find.outputs.title }}
        run: |
          set -euo pipefail
          slug="$(printf "%s" "$TITLE" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g; s/^-+|-+$//g; s/^$/hotfix/')"
          BRANCH="hotfix/${PR_NUM}-${slug}"
          echo "branch=$BRANCH" >> "$GITHUB_OUTPUT"

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Fetch the immutable PR head ref that GitHub keeps: refs/pull/<PR>/head
          echo "Fetching refs/pull/${PR_NUM}/head"
          git fetch origin pull/${PR_NUM}/head:refs/remotes/origin/pr-${PR_NUM}-head

          # Create branch from that exact commit
          git switch --detach origin/pr-${PR_NUM}-head
          git switch -c "$BRANCH"

          # Add a single empty commit so the PR always opens cleanly
          git commit --allow-empty -m "chore: initialize hotfix from PR #${PR_NUM} [skip ci]"
          git push --set-upstream origin "$BRANCH"
          echo "created and pushed $BRANCH from refs/pull/${PR_NUM}/head"

      - name: open hotfix PR
        if: ${{ steps.branch.outputs.branch != '' }}
        uses: actions/github-script@v7
        with:
          script: |
            const repo = context.repo;
            const base = '${{ steps.find.outputs.base_ref }}';
            const head = '${{ steps.branch.outputs.branch }}';
            const prNum = Number('${{ steps.find.outputs.pr_number }}');

            const title = `fix: follow-up for PR #${prNum}`;
            const body  = [
              `Hotfix continuation from PR #${prNum} (created from GitHub's persistent ref \`refs/pull/${prNum}/head\`).`,
              '',
              '---',
              ${{ toJson(steps.find.outputs.body) }}
            ].join('\n');

            const { data: pr } = await github.rest.pulls.create({
              ...repo, title, head, base, body, draft: false
            });

            // Copy labels/milestone/assignees from the issue
            const labels = JSON.parse('${{ steps.find.outputs.labels }}');
            if (labels.length) await github.rest.issues.addLabels({ ...repo, issue_number: pr.number, labels });

            const ms = '${{ steps.find.outputs.milestone }}';
            if (ms) await github.rest.issues.update({ ...repo, issue_number: pr.number, milestone: Number(ms) });

            const asg = JSON.parse('${{ steps.find.outputs.assignees }}');
            const finalAssignees = asg.length ? asg : ['${{ github.event.issue.user.login }}'];
            await github.rest.issues.addAssignees({ ...repo, issue_number: pr.number, assignees: finalAssignees });

            core.info(`hotfix PR opened: #${pr.number} ${pr.html_url}`)
